{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"aa","slug":"aa","date":"2020-08-18T05:15:45.000Z","updated":"2020-08-18T05:18:08.369Z","comments":true,"path":"2020/08/18/aa/","link":"","permalink":"http://yoursite.com/2020/08/18/aa/","excerpt":"","text":"==什么是数据库(database)?== 数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。 在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。数据库技术是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心部分，是进行科学研究和决策管理的重要技术手段。 ==数据库分类== 关系型数据库(存到磁盘) mysql oracle sqlserver （非关系）内存数据库/nosql (存到内存) memcache redis 文档型数据库 mongodb ==MySQL== MySQL是一个(rdbms)关系型数据库管理系统，由瑞典MySQL AB 公司1994开发，免费开源。 Sun公司2008年完成了对开源数据库供应商MySQL的收购，推出付费（MySQL Enterprise Server） 社区版 Oracle（甲骨文） 2009年收购 Sun （java mysql）高斯林 目前MySQL属于oracle, 是最流行的关系型数据库管理系统之一，在 WEB 应用方面,MySQL是最好的 RDBMS (Relational Database Management System数据库的版本 mysql 之父 Monty Widenius mysql官网:https://www.mysql.com/ 版本: MySQL Community Server 8.0 MySQL Community Server 5.7 MySQL Community Server 5.6 MySQL Community Server 5.5==MySQL与mariadb==MySQL之父Michael “Monty” Widenius用他的新项目MariaDB完成了对MySQL的“反戈一击”。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 过去一年中，大型互联网用户以及Linux发行商纷纷抛弃MySQL，转投MariaDB阵营。MariaDB是目前最受关注的MySQL数据库衍生版，也被视为开源数据库MySQL的替代品。 ==MySQL的安装以及连接== 安装 windows安装 下载 5.7.22 直接解压到 安装目录即可 免安装版本 解压后 创建data的目录存放数据的目录 创建my.ini的配置文件 添加下面内容：[mysqld]basedir = mysql的解压目录datadir = mysql的data目录 初始化数据库： mysql的目录/bin/mysqld –initialize-insecure linux安装 phpstudy集成环境安装 启动 mysqld 连接 mysql -uroot -ppassword -h (ip/localhost) -u 用户 -p 密码（注意后面不要有空格） -h 主机名 停止 mysqladmin -uroot –p shutdown 退出界面 exit 或者 quit 修改用户密码 mysqladmin -uroot –p 原密码 password 新密码==MySQL的几个概念== 数据库(database): 数据库是一些关联表的集合。 数据表(table): 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。 列/字段(column): 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。 字段类型:规定字段可以存储什么样的数据类型(数值,浮点，字符串，时间) 行(row)：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。 ==SQL语句概述== SQL (Structured Query Language) 结构化查询语言。 SQL 是用于访问和处理数据库的标准的计算机语言。 SQL 能做什么？ SQL 面向数据库执行查询 SQL 可从数据库取回数据 SQL 可在数据库中插入新的记录 SQL 可更新数据库中的数据 SQL 可从数据库删除记录 SQL 可创建新数据库 SQL 可在数据库中创建新表 SQL 可在数据库中创建存储过程 SQL 可在数据库中创建视图 SQL 可以设置表、存储过程和视图的权限 ==SQL语句书写规则== 分号结尾 ;可以用delimiter 修改 关键词不区分大小写(推荐大写) show databases; SHOW DATABASES; 注释 #注释 – 注释 /*注释*/ ==数据类型(列类型/字段类型)== 整数类型(int) 数据类型|含义（有符号）|无符号(unsigned)|长度|用途—|—|—|—|—|—tinyint(m)|-128127|0255|1个字节|小整数值smallint(m)|-3276832767|065535|2个字节|大整数值mediumint(m)|-83886088388607|016777215|3个字节|大整数值int(m)|-21474836482147483647|04294967295|4个字节|大整数值bigint(m)|-92333720368547758089223372036854775807|018446744073709551615|8个字节|极大整数值注意： 1字节 = 8bit 常用 tinyint smallint int 浮点数和定点数数据类型|含义|长度|用途 –|—|—|—|—|—float(m,d)|单精度浮点型 8位精度 m总个数，d小数位|4字节|单精度数double(m,d)|双精度浮点型 16位精度 m总个数，d小数位|8字节|双精度数decimal(m,d)|定点数|m+2字节|小数注意： m 代表 存储的长度,最大值255，d代表存储的小数位数，最大值30 设一个字段定义为decimal(6,2)，如果插入一个数123.45678,实际数据库里存的是123.45。 注意:浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。推荐用 decimal 字符串类型数据类型|用途|长度 –|—|—char(n)|定长字符串|0-255字节varchar(n)|变长字符串|0-65535字节tinytext|可变长度|0-255字节text|可变长度|0-65535字节mediumtext|可变长度，最多2的24次方-1个字符|0-16777215字节longtext|可变长度，最多2的32次方-1个字符|0-4294967295字节tinyblob|不超过255个字符的二进制字符串|0-255字节blob|二进制形式的长文本数据|0-65 535字节mediumblob|二进制形式的中等长度文本数据|0-16 777 215字节longblob|二进制形式的极大文本数据|0-4 294 967 295字节enum|最大可达65535个不同的枚举值|1或2字节set|最大可达64个不同的值|8字节注意： char 定长 不够用空格补 多了截掉 varchar 可变长度根据字符长度自动的调整 text 存长文本 如 文章内容 length:返回字符串所占的字节数，是计算字段的长度一个汉字是算三个字符,一个数字或字母算一个字符 char_length:返回字符串所占的字符数，不管汉字还是数字或者是字母都算是一个字符 时间类型数据类型|范围|格式|用途|长度 –|—|—|—|—date|1000-01-01/9999-12-31|YYYY-MM-DD|日期值|3字节time|-838:59:59’/‘838:59:59|HH:MM:SS|时间值|3字节datetime|1000-01-01 00:00:00/9999-12-31 23:59:59|YYYY-MM-DD HH:MM:SS|混合日期和时间值|8字节timestamp|1970-01-01 00:00:00/2037 年某时|YYYYMMDD HHMMSS|混合日期和时间值，时间戳|4字节year|1901/2155|YYYY|年份值|1字节注意： 建议用 int存储时间 的时间戳 方便处理 时间戳 1503889157 int ==字段的属性（列名）== unsigned (无符号) auto_increment （自增） default(默认值) comment （字段解释说明） not null null（非空） unique (唯一索引) index (普通索引) primary key(主键) auto_increment 必须制定为 primary key ==SQL语句的运算符== = // 赋值和判断都是 != &lt;&gt; //不等于 &lt; &gt; &lt;= &gt;= OR 或者 || AND 且 &amp;&amp; BETWEEN 5 AND 10 IN NOT IN ==SQL语句的分类== DDL (data defination language)数据定义语言 作用 ：创建 删除 修改 库表结构（重点） 数据库相关操作 查看所有数据库 1SHOW DATABSES 切换数据库 1USE 数据库名 创建数据库 1CREATE DATABASE 数据库名 删除数据库 1DROP DATABASE 数据库名 数据表相关操作 创建数据表结构 12345CREATE TABLE 表名( 列名 列类型 其他的属性， ...... 列名 列类型 ); 表名命名/字段名规则 小写 字母 下划线（user_name） 有意义 不要用系统关键字 查看当前数据库的表 1SHOW TABLES; 查看表结构 1DESC 表名; 查看创建表的sql语句 1SHOW CREATE TABLE 表名; 修改表名 1ALTER TABLE 表名 RENAME (TO) 新表名; 添加表字段 1ALTER TABLE 表名 ADD 字段名 属性...; 1ALTER TABLE 表名 ADD 字段名 属性... AFTER 字段名;&#x2F;&#x2F;在某一字段后加 修改字段类型 1ALTER TABLE 表名 MODIFY 列名 列类型; 1ALTER TABLE 表名 CHANGE 原列名 新列名 列类型; 删除表的某一列 1ALTER TABLE 表名 DROP 列名; 删除表 1DROP TABLE 表名; 删除表记录 1TRUNCATE 表名; DML (data manipulation language) 数据操作语言 作用：增 删 改表的记录（重点） 插入 1INSERT INTO 表名（列1,列2,列3...）VALUES (列值1,列值2...);&#x2F;&#x2F;列和值是一一对应的 1INSERT INTO 表名 VALUES (列值1,列值2...);&#x2F;&#x2F;每一列都要与之对应 更新 1UPDATE 表名 SET 列1&#x3D;列值1,列2&#x3D;列值2 WHERE 条件; 删除 1DELETE FROM 表名 WHERE 条件; DCL (data control language)数据控制语言 作用 ：用户的创建以及授权（懂） 正常线上项目一个mysql可能会跑好几个项目，每个项目对应一个数据库，不同的数据库要对应不同的用户。并且权限也不一样。主要是安全的问题。 并且线上是不能用超级用户ROOT的。（裸奔） 创建用户 1CREATE USER 用户名 @&#39;IP地址&#39; IDENTIFIED BY &#39;密码&#39;; 1CREATE USER 用户名 @’%&#39; IDENTIFIED BY &#39;密码&#39;; 此用户只能在指定的ip上连接 所有ip都可以连接 查看创建用户的数据 1select user,host from mysql.user; 用创建的用户连接数据库 1mysql –u用户名 –h要连的数据库的ip -p &#x2F;&#x2F;不加 –h默认是localhost 用户授权 12GRANT 权限1，权限2... ON 数据库名.* TO 用户名 @ IP地址或者%;&#x2F;&#x2F;所有的数据库 就用 *.* 所有的权限就用 ALL或者ALL PRIVILEGESflush privileges; 12grant 权限 1,权限2 on 数据库名.* to 用户名@IP地址 identified by 密码;flush privileges; 刷新权限 1flush privileges; 查看权限 1SHOW GRANTS FOR 用户名@IP地址; 撤销权限 12REVOKE 权限1，权限2.. ON 数据库名.* FROM 用户名 @IP地址或者%;flush privileges; 用户名加权限 12grant 权限 1,权限2 on 数据库名.* to 用户名@IP地址 identified by 密码flush privileges; 删除用户 1DROP USER 用户名 @ IP地址; 修改密码 1mysqladmin -u用户名 -p旧密码 password 新密码; 1update user set authentication_string&#x3D;password(&#39;111111&#39;) where user&#x3D;&#39;root’;&#x2F;&#x2F;5.7之前版本 忘记密码 解决方案 1mysqld --skip-grant-tables 1mysql登录 1update密码 DQL (data query language)数据查询语言 作用：查询数据（重点） 1SELECT 列名1,列名2,... FROM 表名 [WHERE 条件];&#x2F;&#x2F;查询所有字段用 * 不带where条件 把表的所有记录查出来 运算符和关键字 = // 赋值和判断都是 != &lt;&gt; //不等于 &lt; &gt; &lt;= &gt;= OR 或者 || AND 且 &amp;&amp; BETWEEN 5 AND 10 IN NOT IN like ‘%值%’ 左模糊 右模糊 全模糊 sql语句用法 1SELECT 列名1 AS 别名,列名2 FROM 表名;&#x2F;&#x2F;列起别名 AS alias(别名) 1SELECT CONCAT(列名1,列名2) FROM 表名;&#x2F;&#x2F;连接 CONCAT 1SELECT CONCAT_WS(‘分隔符’,列名1,列名2) FROM 表名;&#x2F;&#x2F;连接 CONCAT_WS 1SELECT DISTINCT 列名1 FROM 表名;&#x2F;&#x2F;过滤掉重复的列值 12345&#x2F;** LIMIT 查询 限制查询的条数 *&#x2F;SELECT * FROM 表名 LIMIT 3;SELECT * FROM 表名 LIMIT 3,5; 12345&#x2F;** 排序 *&#x2F; SELECT * FROM 表名 ORDER BY 字段名 ASC (升序 默认 可以不加); SELECT * FROM 表名 ORDER BY 字段名 DESC 降序; 12345678&#x2F;** 聚合函数 *&#x2F;SELECT COUNT(*) FROM 表名;&#x2F;&#x2F;查询表的记录数SELECT SUM(列名) FROM 表名;&#x2F;&#x2F;查询此列的和SELECT AVG(列名) FROM 表名;&#x2F;&#x2F;查询此列的平均值SELECT MAX(列名) FROM 表名;&#x2F;&#x2F;查询此列的最大值SELECT MIN(列名) FROM 表名;&#x2F;&#x2F;查询此列的最小值 12345&#x2F;** 分组查询 (聚合查询) *&#x2F; SELECT count(*) ,分组中的列 FROM 表名 GROUP BY sex;&#x2F;&#x2F;按照性别分组 SELECT sum(age) ,sez FROM 表名 GROUP BY sex HAVING sum(age)&gt;12; 连表查询 (至少有两个表) 连接查询(推荐内连接) 内连接 12345&#x2F;** 内连接查询 inner join (显式的和隐式的) *&#x2F;select s.name,m.mark from student as s,mark as m where s.id&#x3D;m.stu_id;select s.name,m.mark from student as s inner join mark as m where&#x2F;on s.id&#x3D;m.stu_id; 外连接（左连接/右连接） 12select s.name,m.mark from student as s left join mark as m on s.id&#x3D;m.stu_id;&#x2F;&#x2F;左连接select s.name,m.mark from student as s right join mark as m on s.id&#x3D;m.stu_id;&#x2F;&#x2F;右连接 全连接 1full join 联合查询 UNION 操作符用于合并两个或多个 SELECT 语句的结果集。 UNION(去重) UNION ALL UNION 内部的 SELECT 语句必须拥有相同数量的列1234&#x2F;** 内连接查询 inner join (显式的和隐式的) *&#x2F; select id,name from php union select name,id from java; 子查询 1select * from student where id in (select stu_id from mark); ==字符集/字符集校对==1show character set; &#x2F;&#x2F;查看数据库支持所有字符集 1show create database 数据库名; &#x2F;&#x2F;查看数据库字符集 1show create table 表名; &#x2F;&#x2F;查看表字符集 1alter database 数据库名 DEFAULT CHARACTER SET 字符集;&#x2F;&#x2F;修改数据库字符集 12345&#x2F;** 修改表字符集 *&#x2F; alter table 表名 DEFAULT CHARSET&#x3D;字符集; &#x2F;&#x2F;改表名 alter table 表名 convert to character set 字符集; &#x2F;&#x2F;改表以及字段字符集 字符集校对 校对规则则是定义了比较字符串的方式，解决排序和字符分组的问题。使用utf8_general_ci 不区分大小写 修改配置文件 创建时默认字符集 my.ini mysqld 添加配置 character_set_server=utf8==mysql存储引擎==存储引擎负责MySQL中数据的存储和提取，是数据库中非常重要非常核心的部分，也是MySQL区别与其他数据库的一个重要特性。 存储引擎 BLACKHOLE CSV MEMORY ARCHIVE MyISAM 全文索引（full text） 不支持事务 表级锁 崩溃恢复支持不好 短数据性能好 不推荐用 InnoDB 支持事务 不支持全文索引(5.6版本后开始支持) 行级锁 崩溃恢复支持 性能好 5.6开始默认的数据库引擎就是InnoDB 推荐innodb 速度 快 查看数据库支持的引擎 1show engines\\G; 查看数据表的引擎 1show table status;&#x2F;&#x2F;查看所有 查看某一表的 1show create table 表名; 修改引擎 1alter table 表名 engine&#x3D;引擎名; 建表时不指定的话默认的用配置文件里的 mysqld 添加 1default-storage-engine&#x3D;MyISAM ==关于int(n)== int(N) ，N 表示最大显示宽度（字段设置zerofill属性时可查看区别），不指定N时，默认为10。N 的值跟 int(N) 所占多少存储空间或最大能存储多大长度数据并无任何关系。也就是说 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。 int(n) 并不是表示存储的长度，int(2) 与int(3) 并不能限制只能存 2或者3的长度 n只有在加了 zerofill才能看出区别 int(6) zerofill 与 int(6) 存储 123 第一种 000123 第二种 123 int(n)可以不加 不加的时候 如果有unsigned n为10 没有加unsigned 11==char(n) 与 varchar(n)== n为可存储字符串的长度，创建表的时候必须指定，超过长度后插入失败 char 存的为定长，如果存入数据没有达到长度，仍占用空间 取数据快 适合存储定长的字符串 如 密码加密后的 存不定长的浪费空间 但是查询数据块 varchar 存可变长度，可以根据字符串的长度，占用存储空间,取数据相对慢 适合存储 可变长度的字符串如用户名 节省空间 但是查询数据慢==mysql反引号== 它是为了区分MYSQL的保留字与普通字符而引入的符号 1create table select(id int not null); &#x2F;&#x2F;创建失败 select表名是mysql的关键字 1create table &#96;select&#96;(id int not null); 保留字 不能用于表名 以及字段名 官方文档给的关键字 https://dev.mysql.com/doc/refman/5.7/en/keywords.html==mysql管理工具== navicate 连接mysql 以及使用 客户端 phpMyAdmin 连接使用 web页面==DTL 事务控制语言== 一个sql语句就是一个事务 事务可以保证 一组sql语句要么都成功要么都失败 默认自动提交 可以关闭 set autocommit=0关闭自动提交,最后 插入或者修改时 只有 commit才会最终存入否则不存 事务sql语句 123456start transactionsql语句...&#x2F;&#x2F;如果上面的sql语句没有问题commit &#x2F;&#x2F;提交&#x2F;&#x2F;如果有问题rollback &#x2F;&#x2F;回滚 事务特性 原子性：一个事务中的所有语句，应该做到：要么全做，要么一个都不做 一致性：让数据保持逻辑上的“合理性”，比如：一个商品出库时，既要让商品库中的该商品数量减1，又要让对应用户的购物车中的该商品加1 隔离性：如果多个事务同时并发执行，但每个事务就像各自独立执行一样 持久性：一个事务执行成功，则对数据来说应该是一个明确的硬盘数据更改（而不仅仅是内存中的变化）==索引== 索引操作 添加索引 1alter table 表名 add index&#x2F;unique&#x2F;fulltext [索引名](字段名); 删除索引 1alter table 表名 drop index 索引名; 查看表的所有索引 1show index from 表名; 注意：索引在提供查找速度的同时，降低增删改的速度。 索引分类 普通索引：key/index(字段名1，字段名2， …. ） 唯一索引：unique key (字段名1，字段名2， …. ） 主键索引：primary key (字段名1，字段名2， …. ） 全文索引：fulltext (字段名1，字段名2， …. ） SELECT * FROM articlesWHERE MATCH (title,body)AGAINST (‘database’ IN NATURAL LANGUAGE MODE); 外键约束：foreign key (字段) REFERENCES 表名(字段名) innodb支持==sql优化== explain select 语句(查看执行情况) select_type:查询类型 simple 和drived type：system,const,eq_ref,ref,range,index,all,null system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL ，一般来说，得保证查询至少达到range级别，最好能达到ref。 possible_keys:可能用到的索引 key:实际用到的索引 key_line:索引字段最大可能使用长度 ref:const rows:估计需要扫描的行数 打开慢查询日志(查找查询慢的sql语句) 123long_query_time&#x3D;2 slow-query-log&#x3D;On #slow_query_log_file&#x3D;&quot;mysql_slow_query.log&quot; 关闭缓存避免缓存的影响 123show status like &#39;%qcache%&#39; 查看命中率set global query_cache_size&#x3D;0set global query_cache_type&#x3D;0 永久的修改配置文件my.cnf ,添加下面的配置即可。 12query_cache_type&#x3D;0query_cache_size&#x3D;0 sql语句分析 开启 set profiling =ON explain sql语句 查看执行的索引情况 show profiles 查看每个语句的执行具体 show profile for query ID值 查看具体的每个执行的时间==数据库编程== 存储过程函数 123456789delimiter &#x2F;&#x2F; 修改结束符 避免冲突create procedure he(a int)beginselect * from student where id &#x3D;a ;end&#x2F;&#x2F;delimiter ;call he(1); ==视图== 创建 1create view 视图名 [（列名1，列名2，...）] as select 语句； 使用 1select 列名1 from 视图名; 修改 1alter view 视图名 [（列名1，列名2，...）] as select语句； 删除 1drop view [if exists] 视图名； ==触发器==1234create trigger 触发器名 after|before insert|update|delete on 表名 for each rowbegin sql 语句end; 123456CREATE TRIGGER t_afterinsert_on_tab1 AFTER INSERT ON tab1 FOR EACH ROW BEGIN insert into tab2(tab2_id) values(new.tab1_id); END; ==数据的导入以及导出== 方式 mysqldump 工具 navicate phpmyadmin(不推荐) 导出 navicate 右键导入导出 mysqldump -u用户名 -p密码 数据库名 表名 &gt;文件名 导入 mysql -u用户名 -p密码 &lt;文件名 连接到数据库 source 文件名全路径 推荐mysqldump 速度快 安全==数据表设计(三范式)== 第一范式（１ＮＦ），原子性 即表的列的具有原子性,不可再分解，即列的信息，不能分解, 只要数据库是关系型数据库，就自动的满足1NF。 第二范式（2NF） 是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要我们设计一个主键来实现(这里的主键不包含业务逻辑) 第三范式（3NF） 满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主键字段。就是说，表的信息，如果能够被推导出来，就不应该单独的设计一个字段来存放(能尽量外键join就用外键join)。很多时候，我们为了满足第三范式往往会把一张表分成多张表 另外，范式不是绝对要求，有时候我们为了数据的使用方便，还会（需要）故意违反范式。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-18T03:52:48.844Z","updated":"2020-08-18T03:52:48.844Z","comments":true,"path":"2020/08/18/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}