<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-18T05:18:08.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aa</title>
    <link href="http://yoursite.com/2020/08/18/aa/"/>
    <id>http://yoursite.com/2020/08/18/aa/</id>
    <published>2020-08-18T05:15:45.000Z</published>
    <updated>2020-08-18T05:18:08.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是数据库-database"><a href="#什么是数据库-database" class="headerlink" title="==什么是数据库(database)?=="></a>==什么是数据库(database)?==</h3><ol><li>数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。</li><li>在信息化社会，充分有效地管理和利用各类信息资源，是进行科学研究和决策管理的前提条件。数据库技术是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心部分，是进行科学研究和决策管理的重要技术手段。</li></ol><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="==数据库分类=="></a>==数据库分类==</h3><ul><li>关系型数据库(存到磁盘)<ul><li>mysql</li><li>oracle   </li><li>sqlserver</li></ul></li><li>（非关系）内存数据库/nosql (存到内存)<ul><li>memcache</li><li>redis</li></ul></li><li>文档型数据库<ul><li>mongodb </li></ul></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="==MySQL=="></a>==MySQL==</h3><ul><li>MySQL是一个(rdbms)关系型数据库管理系统，由瑞典MySQL AB 公司1994开发，免费开源。</li><li>Sun公司2008年完成了对开源数据库供应商MySQL的收购，推出付费<br>（MySQL Enterprise Server） 社区版</li><li>Oracle（甲骨文） 2009年收购 Sun （java  mysql）高斯林 </li><li>目前MySQL属于oracle, 是最流行的关系型数据库管理系统之一，在 WEB 应用方面,MySQL是最好的 RDBMS (Relational Database Management System数据库的版本</li><li>mysql 之父 Monty Widenius</li><li>mysql官网:<a href="https://www.mysql.com/">https://www.mysql.com/</a></li><li>版本:<ul><li>MySQL Community Server 8.0</li><li>MySQL Community Server 5.7</li><li>MySQL Community Server 5.6</li><li>MySQL Community Server 5.5<h3 id="MySQL与mariadb"><a href="#MySQL与mariadb" class="headerlink" title="==MySQL与mariadb=="></a>==MySQL与mariadb==</h3>MySQL之父Michael “Monty” Widenius用他的新项目MariaDB完成了对MySQL的“反戈一击”。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 过去一年中，大型互联网用户以及Linux发行商纷纷抛弃MySQL，转投MariaDB阵营。MariaDB是目前最受关注的MySQL数据库衍生版，也被视为开源数据库MySQL的替代品。</li></ul></li></ul><h3 id="MySQL的安装以及连接"><a href="#MySQL的安装以及连接" class="headerlink" title="==MySQL的安装以及连接=="></a>==MySQL的安装以及连接==</h3><ul><li>安装<ul><li>windows安装<ul><li>下载 5.7.22  直接解压到 安装目录即可  免安装版本</li><li>解压后<ol><li>创建data的目录存放数据的目录</li><li>创建my.ini的配置文件  添加下面内容：<br>[mysqld]<br>basedir =  mysql的解压目录<br>datadir = mysql的data目录</li></ol></li><li>初始化数据库：<br>  mysql的目录/bin/mysqld     –initialize-insecure</li></ul></li><li>linux安装</li><li>phpstudy集成环境安装</li></ul></li><li>启动<ul><li>mysqld</li></ul></li><li>连接<ul><li>mysql  -uroot -ppassword  <ul><li>-h (ip/localhost)</li><li>-u  用户</li><li>-p 密码（注意后面不要有空格）</li><li>-h  主机名</li></ul></li></ul></li><li>停止<ul><li>mysqladmin  -uroot –p  shutdown</li></ul></li><li>退出界面<ul><li>exit  或者  quit </li></ul></li><li>修改用户密码<ul><li>mysqladmin   -uroot –p 原密码   password  新密码<h4 id="MySQL的几个概念"><a href="#MySQL的几个概念" class="headerlink" title="==MySQL的几个概念=="></a>==MySQL的几个概念==</h4></li></ul></li><li>数据库(database): 数据库是一些关联表的集合。</li><li>数据表(table): 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列/字段(column): 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>字段类型:规定字段可以存储什么样的数据类型(数值,浮点，字符串，时间)</li><li>行(row)：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li></ul><h3 id="SQL语句概述"><a href="#SQL语句概述" class="headerlink" title="==SQL语句概述=="></a>==SQL语句概述==</h3><ul><li>SQL   (Structured Query Language)   结构化查询语言。</li><li>SQL 是用于访问和处理数据库的标准的计算机语言。</li><li>SQL 能做什么？<ul><li>SQL 面向数据库执行查询</li><li>SQL 可从数据库取回数据</li><li>SQL 可在数据库中插入新的记录</li><li>SQL 可更新数据库中的数据</li><li>SQL 可从数据库删除记录</li><li>SQL 可创建新数据库</li><li>SQL 可在数据库中创建新表</li><li>SQL 可在数据库中创建存储过程</li><li>SQL 可在数据库中创建视图</li><li>SQL 可以设置表、存储过程和视图的权限</li></ul></li></ul><h3 id="SQL语句书写规则"><a href="#SQL语句书写规则" class="headerlink" title="==SQL语句书写规则=="></a>==SQL语句书写规则==</h3><ol><li>分号结尾 ;可以用delimiter 修改</li><li>关键词不区分大小写(推荐大写)<ol><li>show databases;</li><li>SHOW DATABASES;</li></ol></li><li>注释<ol><li>#注释 </li><li>– 注释 </li><li>/*注释*/</li></ol></li></ol><h3 id="数据类型-列类型-字段类型"><a href="#数据类型-列类型-字段类型" class="headerlink" title="==数据类型(列类型/字段类型)=="></a>==数据类型(列类型/字段类型)==</h3><p><img src="https://note.youdao.com/yws/res/1201/WEBRESOURCEe8fac090e5bb000181d32806581cbce2" alt="数据类型.png"></p><ul><li><h4 id="整数类型-int"><a href="#整数类型-int" class="headerlink" title="整数类型(int)"></a>整数类型(int)</h4></li></ul><p>数据类型|含义（有符号）|无符号(unsigned)|长度|用途<br>—|—|—|—|—|—<br>tinyint(m)|-128<del>127|0</del>255|1个字节|小整数值<br>smallint(m)|-32768<del>32767|0</del>65535|2个字节|大整数值<br>mediumint(m)|-8388608<del>8388607|0</del>16777215|3个字节|大整数值<br>int(m)|-2147483648<del>2147483647|0</del>4294967295|4个字节|大整数值<br>bigint(m)|-9233372036854775808<del>9223372036854775807|0</del>18446744073709551615|8个字节|极大整数值<br>注意：</p><ol><li>1字节 = 8bit</li><li>常用  tinyint   smallint  int </li></ol><ul><li><h4 id="浮点数和定点数"><a href="#浮点数和定点数" class="headerlink" title="浮点数和定点数"></a>浮点数和定点数</h4>数据类型|含义|长度|用途</li><li>–|—|—|—|—|—<br>float(m,d)|单精度浮点型    8位精度   m总个数，d小数位|4字节|单精度数<br>double(m,d)|双精度浮点型    16位精度 m总个数，d小数位|8字节|双精度数<br>decimal(m,d)|定点数|m+2字节|小数<br>注意：</li></ul><ol><li>m 代表 存储的长度,最大值255，d代表存储的小数位数，最大值30</li><li>设一个字段定义为decimal(6,2)，如果插入一个数123.45678,实际数据库里存的是123.45。</li><li>注意:浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。推荐用 decimal</li></ol><ul><li><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4>数据类型|用途|长度</li><li>–|—|—<br>char(n)|定长字符串|0-255字节<br>varchar(n)|变长字符串|0-65535字节<br>tinytext|可变长度|0-255字节<br>text|可变长度|0-65535字节<br>mediumtext|可变长度，最多2的24次方-1个字符|0-16777215字节<br>longtext|可变长度，最多2的32次方-1个字符|0-4294967295字节<br>tinyblob|不超过255个字符的二进制字符串|0-255字节<br>blob|二进制形式的长文本数据|0-65 535字节<br>mediumblob|二进制形式的中等长度文本数据|0-16 777 215字节<br>longblob|二进制形式的极大文本数据|0-4 294 967 295字节<br>enum|最大可达65535个不同的枚举值|1或2字节<br>set|最大可达64个不同的值|8字节<br>注意：</li></ul><ol><li>char  定长 不够用空格补  多了截掉</li><li>varchar  可变长度根据字符长度自动的调整</li><li>text  存长文本  如 文章内容</li><li>length:返回字符串所占的字节数，是计算字段的长度一个汉字是算三个字符,一个数字或字母算一个字符</li><li>char_length:返回字符串所占的字符数，不管汉字还是数字或者是字母都算是一个字符 </li></ol><ul><li><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4>数据类型|范围|格式|用途|长度</li><li>–|—|—|—|—<br>date|1000-01-01/9999-12-31|YYYY-MM-DD|日期值|3字节<br>time|-838:59:59’/‘838:59:59|HH:MM:SS|时间值|3字节<br>datetime|1000-01-01 00:00:00/9999-12-31 23:59:59|YYYY-MM-DD HH:MM:SS|混合日期和时间值|8字节<br>timestamp|1970-01-01 00:00:00/2037 年某时|YYYYMMDD HHMMSS|混合日期和时间值，时间戳|4字节<br>year|1901/2155|YYYY|年份值|1字节<br>注意：</li></ul><ol><li>建议用 int存储时间 的时间戳 方便处理</li><li>时间戳   1503889157   int</li></ol><h3 id="字段的属性（列名）"><a href="#字段的属性（列名）" class="headerlink" title="==字段的属性（列名）=="></a>==字段的属性（列名）==</h3><ul><li>unsigned  (无符号) </li><li>auto_increment  （自增）</li><li>default(默认值)   </li><li>comment （字段解释说明）</li><li>not null   null（非空）</li><li>unique   (唯一索引)</li><li>index    (普通索引)</li><li>primary key(主键)</li><li>auto_increment  必须制定为 primary key</li></ul><h3 id="SQL语句的运算符"><a href="#SQL语句的运算符" class="headerlink" title="==SQL语句的运算符=="></a>==SQL语句的运算符==</h3><ul><li>=              // 赋值和判断都是</li><li>!=   &lt;&gt;      //不等于</li><li>&lt;   &gt;  &lt;=  &gt;=  </li><li>OR  或者   ||</li><li>AND    且     &amp;&amp;</li><li>BETWEEN 5 AND 10</li><li>IN</li><li>NOT IN  </li></ul><h3 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="==SQL语句的分类=="></a>==SQL语句的分类==</h3><blockquote><p>DDL (data defination language)数据定义语言</p><blockquote><p>作用 ：创建 删除  修改 库表结构（重点）</p></blockquote></blockquote><ul><li>数据库相关操作<ul><li>查看所有数据库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABSES</span><br></pre></td></tr></table></figure></li><li>切换数据库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名</span><br></pre></td></tr></table></figure></li><li>创建数据库   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名</span><br></pre></td></tr></table></figure></li><li>删除数据库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP  DATABASE  数据库名</span><br></pre></td></tr></table></figure></li></ul></li><li>数据表相关操作<ul><li>创建数据表结构  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line"> 列名 列类型  其他的属性，</span><br><span class="line"> ......</span><br><span class="line"> 列名 列类型</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><ul><li>表名命名/字段名规则<ul><li>小写 字母 下划线（user_name）</li><li>有意义</li><li>不要用系统关键字</li></ul></li></ul></li><li>查看当前数据库的表  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure></li><li>查看表结构  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC  表名;</span><br></pre></td></tr></table></figure></li><li>查看创建表的sql语句  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;</span><br></pre></td></tr></table></figure></li><li>修改表名  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名  RENAME (TO) 新表名;</span><br></pre></td></tr></table></figure></li><li>添加表字段  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD   字段名  属性...;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD   字段名  属性... AFTER 字段名;&#x2F;&#x2F;在某一字段后加</span><br></pre></td></tr></table></figure></li><li>修改字段类型  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY    列名  列类型;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名  CHANGE  原列名  新列名  列类型;</span><br></pre></td></tr></table></figure></li><li>删除表的某一列  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP  列名;</span><br></pre></td></tr></table></figure></li><li>删除表  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP  TABLE 表名;</span><br></pre></td></tr></table></figure></li><li>删除表记录  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE 表名;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>DML (data manipulation language) 数据操作语言</p><blockquote><p>作用：增  删  改表的记录（重点）</p></blockquote></blockquote><ul><li><p>插入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO  表名（列1,列2,列3...）VALUES (列值1,列值2...);&#x2F;&#x2F;列和值是一一对应的</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名  VALUES (列值1,列值2...);&#x2F;&#x2F;每一列都要与之对应</span><br></pre></td></tr></table></figure></li><li><p>更新</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET  列1&#x3D;列值1,列2&#x3D;列值2 WHERE 条件;</span><br></pre></td></tr></table></figure></li><li><p>删除</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE  FROM 表名  WHERE  条件;</span><br></pre></td></tr></table></figure><blockquote><p>DCL (data control language)数据控制语言</p><blockquote><p>作用 ：用户的创建以及授权（懂）</p></blockquote></blockquote><p>  正常线上项目一个mysql可能会跑好几个项目，每个项目对应一个数据库，不同的数据库要对应不同的用户。并且权限也不一样。主要是安全的问题。<br>  并且线上是不能用超级用户ROOT的。（裸奔）</p></li><li><p>创建用户</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE  USER  用户名 @&#39;IP地址&#39;  IDENTIFIED BY &#39;密码&#39;;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE  USER  用户名 @’%&#39;  IDENTIFIED BY &#39;密码&#39;;</span><br></pre></td></tr></table></figure><ul><li>此用户只能在指定的ip上连接    所有ip都可以连接</li></ul></li><li><p>查看创建用户的数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure></li><li><p>用创建的用户连接数据库</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –u用户名  –h要连的数据库的ip   -p  &#x2F;&#x2F;不加 –h默认是localhost</span><br></pre></td></tr></table></figure></li><li><p>用户授权</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT  权限1，权限2...  ON  数据库名.*  TO  用户名  @ IP地址或者%;&#x2F;&#x2F;所有的数据库  就用 *.*  所有的权限就用 ALL或者ALL PRIVILEGES</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant  权限 1,权限2  on  数据库名.* to 用户名@IP地址 identified  by 密码;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>刷新权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>查看权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW  GRANTS FOR 用户名@IP地址;</span><br></pre></td></tr></table></figure></li><li><p>撤销权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REVOKE  权限1，权限2.. ON  数据库名.* FROM 用户名 @IP地址或者%;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>用户名加权限</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant  权限 1,权限2  on  数据库名.* to 用户名@IP地址 identified  by 密码</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER  用户名 @ IP地址;</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin  -u用户名 -p旧密码  password 新密码;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string&#x3D;password(&#39;111111&#39;) where user&#x3D;&#39;root’;&#x2F;&#x2F;5.7之前版本</span><br></pre></td></tr></table></figure></li></ol></li><li><p>忘记密码  解决方案</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql登录</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update密码</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>DQL (data query language)数据查询语言</p><blockquote><p>作用：查询数据（重点）</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  列名1,列名2,...  FROM  表名  [WHERE 条件];&#x2F;&#x2F;查询所有字段用 *   不带where条件  把表的所有记录查出来</span><br></pre></td></tr></table></figure><ul><li>运算符和关键字<ul><li>=              // 赋值和判断都是</li><li>!=   &lt;&gt;      //不等于</li><li>&lt;   &gt;  &lt;=  &gt;=  </li><li>OR  或者   ||</li><li>AND    且     &amp;&amp;</li><li>BETWEEN 5 AND 10</li><li>IN</li><li>NOT IN</li><li>like    ‘%值%’   左模糊  右模糊  全模糊</li></ul></li><li>sql语句用法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名1 AS 别名,列名2  FROM 表名;&#x2F;&#x2F;列起别名 AS    alias(别名)  </span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT   CONCAT(列名1,列名2)   FROM 表名;&#x2F;&#x2F;连接 CONCAT</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT_WS(‘分隔符’,列名1,列名2) FROM 表名;&#x2F;&#x2F;连接 CONCAT_WS</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 列名1 FROM 表名;&#x2F;&#x2F;过滤掉重复的列值</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  LIMIT  查询  限制查询的条数 </span><br><span class="line"> *&#x2F;</span><br><span class="line">SELECT  * FROM 表名  LIMIT  3;</span><br><span class="line">SELECT  * FROM 表名  LIMIT  3,5;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  排序</span><br><span class="line"> *&#x2F;</span><br><span class="line"> SELECT * FROM 表名  ORDER  BY  字段名  ASC  (升序 默认  可以不加);</span><br><span class="line"> SELECT * FROM 表名  ORDER  BY  字段名  DESC  降序;</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  聚合函数</span><br><span class="line"> *&#x2F;</span><br><span class="line">SELECT COUNT(*) FROM   表名;&#x2F;&#x2F;查询表的记录数</span><br><span class="line">SELECT SUM(列名) FROM  表名;&#x2F;&#x2F;查询此列的和</span><br><span class="line">SELECT AVG(列名) FROM  表名;&#x2F;&#x2F;查询此列的平均值</span><br><span class="line">SELECT MAX(列名) FROM  表名;&#x2F;&#x2F;查询此列的最大值</span><br><span class="line">SELECT MIN(列名) FROM  表名;&#x2F;&#x2F;查询此列的最小值</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  分组查询  (聚合查询)</span><br><span class="line"> *&#x2F;</span><br><span class="line"> SELECT  count(*) ,分组中的列  FROM 表名  GROUP BY sex;&#x2F;&#x2F;按照性别分组</span><br><span class="line"> SELECT  sum(age) ,sez FROM  表名  GROUP BY sex  HAVING sum(age)&gt;12;</span><br></pre></td></tr></table></figure></li><li>连表查询 (至少有两个表)<ul><li>连接查询(推荐内连接)<ul><li>内连接   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  内连接查询  inner join  (显式的和隐式的)</span><br><span class="line"> *&#x2F;</span><br><span class="line">select s.name,m.mark  from student as s,mark as m  where s.id&#x3D;m.stu_id;</span><br><span class="line">select s.name,m.mark  from student as s inner join mark as m  where&#x2F;on s.id&#x3D;m.stu_id;</span><br></pre></td></tr></table></figure></li><li>外连接（左连接/右连接）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select s.name,m.mark  from student as s left join mark as m  on s.id&#x3D;m.stu_id;&#x2F;&#x2F;左连接</span><br><span class="line">select s.name,m.mark  from student as s right join mark as m  on s.id&#x3D;m.stu_id;&#x2F;&#x2F;右连接</span><br></pre></td></tr></table></figure></li><li>全连接  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">full join</span><br></pre></td></tr></table></figure></li></ul></li><li>联合查询<ul><li>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</li><li>UNION(去重)</li><li>UNION ALL</li><li>UNION 内部的 SELECT 语句必须拥有相同数量的列<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  内连接查询  inner join  (显式的和隐式的)</span><br><span class="line"> *&#x2F;</span><br><span class="line"> select id,name from php union  select name,id  from java;</span><br></pre></td></tr></table></figure></li></ul></li><li>子查询  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where id in (select stu_id from mark);</span><br></pre></td></tr></table></figure><h3 id="字符集-字符集校对"><a href="#字符集-字符集校对" class="headerlink" title="==字符集/字符集校对=="></a>==字符集/字符集校对==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show character set;  &#x2F;&#x2F;查看数据库支持所有字符集</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名;  &#x2F;&#x2F;查看数据库字符集</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table  表名;   &#x2F;&#x2F;查看表字符集</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database 数据库名 DEFAULT CHARACTER SET 字符集;&#x2F;&#x2F;修改数据库字符集</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  修改表字符集</span><br><span class="line"> *&#x2F;</span><br><span class="line"> alter table 表名 DEFAULT CHARSET&#x3D;字符集;  &#x2F;&#x2F;改表名</span><br><span class="line"> alter table 表名  convert  to  character set 字符集; &#x2F;&#x2F;改表以及字段字符集</span><br></pre></td></tr></table></figure></li></ul></li><li>字符集校对<ul><li>校对规则则是定义了比较字符串的方式，解决排序和字符分组的问题。<br>使用utf8_general_ci 不区分大小写</li></ul></li><li>修改配置文件  创建时默认字符集<ul><li>my.ini   mysqld  添加配置   character_set_server=utf8<h3 id="mysql存储引擎"><a href="#mysql存储引擎" class="headerlink" title="==mysql存储引擎=="></a>==mysql存储引擎==</h3>存储引擎负责MySQL中数据的存储和提取，是数据库中非常重要非常核心的部分，也是MySQL区别与其他数据库的一个重要特性。</li></ul></li><li>存储引擎<ul><li>BLACKHOLE    CSV        MEMORY       ARCHIVE</li><li>MyISAM<ul><li>全文索引（full text）</li><li>不支持事务</li><li>表级锁</li><li>崩溃恢复支持不好</li><li>短数据性能好</li><li>不推荐用</li></ul></li><li>InnoDB<ul><li>支持事务</li><li>不支持全文索引(5.6版本后开始支持)</li><li>行级锁</li><li>崩溃恢复支持</li><li>性能好</li><li>5.6开始默认的数据库引擎就是InnoDB</li><li>推荐innodb  速度 快</li></ul></li><li>查看数据库支持的引擎  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines\G;</span><br></pre></td></tr></table></figure></li><li>查看数据表的引擎  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status;&#x2F;&#x2F;查看所有</span><br></pre></td></tr></table></figure></li><li>查看某一表的  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show  create table 表名;</span><br></pre></td></tr></table></figure></li><li>修改引擎  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 engine&#x3D;引擎名;</span><br></pre></td></tr></table></figure></li><li>建表时不指定的话默认的用配置文件里的 <ul><li>mysqld   添加 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine&#x3D;MyISAM</span><br></pre></td></tr></table></figure><h3 id="关于int-n"><a href="#关于int-n" class="headerlink" title="==关于int(n)=="></a>==关于int(n)==</h3></li></ul></li></ul></li><li>int(N) ，N 表示最大显示宽度（字段设置zerofill属性时可查看区别），不指定N时，默认为10。N 的值跟 int(N) 所占多少存储空间或最大能存储多大长度数据并无任何关系。也就是说 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。</li><li>int(n) 并不是表示存储的长度，int(2) 与int(3) 并不能限制只能存 2或者3的长度</li><li>n只有在加了 zerofill才能看出区别</li><li>int(6) zerofill   与  int(6)  存储 123<ul><li>第一种  000123  第二种  123</li></ul></li><li>int(n)可以不加  不加的时候 如果有unsigned  n为10   没有加unsigned 11<h3 id="char-n-与-varchar-n"><a href="#char-n-与-varchar-n" class="headerlink" title="==char(n) 与 varchar(n)=="></a>==char(n) 与 varchar(n)==</h3>  n为可存储字符串的长度，创建表的时候必须指定，超过长度后插入失败</li><li>char<ul><li>存的为定长，如果存入数据没有达到长度，仍占用空间  取数据快 </li><li>适合存储定长的字符串 如  密码加密后的</li><li>存不定长的浪费空间 但是查询数据块</li></ul></li><li>varchar<ul><li>存可变长度，可以根据字符串的长度，占用存储空间,取数据相对慢</li><li>适合存储  可变长度的字符串如用户名</li><li>节省空间  但是查询数据慢<h3 id="mysql反引号"><a href="#mysql反引号" class="headerlink" title="==mysql反引号=="></a>==mysql反引号==</h3></li></ul></li><li>它是为了区分MYSQL的保留字与普通字符而引入的符号  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table select(id int not null);  &#x2F;&#x2F;创建失败  select表名是mysql的关键字</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table &#96;select&#96;(id int not null);</span><br></pre></td></tr></table></figure></li><li>保留字 不能用于表名 以及字段名</li><li>官方文档给的关键字<ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">https://dev.mysql.com/doc/refman/5.7/en/keywords.html</a><h3 id="mysql管理工具"><a href="#mysql管理工具" class="headerlink" title="==mysql管理工具=="></a>==mysql管理工具==</h3></li></ul></li><li>navicate   连接mysql 以及使用  客户端</li><li>phpMyAdmin  连接使用  web页面<h3 id="DTL-事务控制语言"><a href="#DTL-事务控制语言" class="headerlink" title="==DTL 事务控制语言=="></a>==DTL 事务控制语言==</h3></li><li>一个sql语句就是一个事务</li><li>事务可以保证 一组sql语句要么都成功要么都失败</li><li>默认自动提交</li><li>可以关闭  set autocommit=0关闭自动提交,最后  插入或者修改时 只有 commit才会最终存入否则不存</li><li>事务sql语句  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start transaction</span><br><span class="line">sql语句...</span><br><span class="line">&#x2F;&#x2F;如果上面的sql语句没有问题</span><br><span class="line">commit &#x2F;&#x2F;提交</span><br><span class="line">&#x2F;&#x2F;如果有问题</span><br><span class="line">rollback &#x2F;&#x2F;回滚</span><br></pre></td></tr></table></figure></li><li>事务特性<ul><li>原子性：一个事务中的所有语句，应该做到：要么全做，要么一个都不做</li><li>一致性：让数据保持逻辑上的“合理性”，比如：一个商品出库时，既要让商品库中的该商品数量减1，又要让对应用户的购物车中的该商品加1</li><li>隔离性：如果多个事务同时并发执行，但每个事务就像各自独立执行一样</li><li>持久性：一个事务执行成功，则对数据来说应该是一个明确的硬盘数据更改（而不仅仅是内存中的变化）<h3 id="索引"><a href="#索引" class="headerlink" title="==索引=="></a>==索引==</h3></li></ul></li><li>索引操作<ul><li>添加索引  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter  table 表名 add index&#x2F;unique&#x2F;fulltext [索引名](字段名);</span><br></pre></td></tr></table></figure></li><li>删除索引  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop index 索引名;</span><br></pre></td></tr></table></figure></li><li>查看表的所有索引  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from 表名;</span><br></pre></td></tr></table></figure></li><li>注意：索引在提供查找速度的同时，降低增删改的速度。</li></ul></li><li>索引分类<ul><li>普通索引：key/index(字段名1，字段名2， …. ）</li><li>唯一索引：unique  key (字段名1，字段名2， …. ）</li><li>主键索引：primary  key (字段名1，字段名2， …. ）</li><li>全文索引：fulltext (字段名1，字段名2， …. ） <ul><li>SELECT * FROM articles<br>WHERE MATCH (title,body)<br>AGAINST (‘database’ IN NATURAL LANGUAGE MODE);</li></ul></li><li>外键约束：foreign key (字段) REFERENCES 表名(字段名) innodb支持<h3 id="sql优化"><a href="#sql优化" class="headerlink" title="==sql优化=="></a>==sql优化==</h3></li></ul></li><li>explain   select 语句(查看执行情况)<ul><li>select_type:查询类型 simple 和drived</li><li>type：system,const,eq_ref,ref,range,index,all,null<ul><li>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL ，一般来说，得保证查询至少达到range级别，最好能达到ref。</li></ul></li><li>possible_keys:可能用到的索引</li><li>key:实际用到的索引</li><li>key_line:索引字段最大可能使用长度</li><li>ref:const</li><li>rows:估计需要扫描的行数</li></ul></li><li>打开慢查询日志(查找查询慢的sql语句)  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">long_query_time&#x3D;2  </span><br><span class="line">slow-query-log&#x3D;On  </span><br><span class="line">#slow_query_log_file&#x3D;&quot;mysql_slow_query.log&quot;  </span><br></pre></td></tr></table></figure></li><li>关闭缓存避免缓存的影响  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show  status like &#39;%qcache%&#39; 查看命中率</span><br><span class="line">set global query_cache_size&#x3D;0</span><br><span class="line">set global query_cache_type&#x3D;0</span><br></pre></td></tr></table></figure><ul><li>永久的修改配置文件my.cnf ,添加下面的配置即可。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type&#x3D;0</span><br><span class="line">query_cache_size&#x3D;0</span><br></pre></td></tr></table></figure></li></ul></li><li>sql语句分析<ul><li>开启 set  profiling =ON<ul><li>explain  sql语句  查看执行的索引情况</li><li>show profiles  查看每个语句的执行具体</li><li>show profile for query  ID值 查看具体的每个执行的时间<h3 id="数据库编程"><a href="#数据库编程" class="headerlink" title="==数据库编程=="></a>==数据库编程==</h3></li></ul></li></ul></li><li>存储过程函数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F; 修改结束符 避免冲突</span><br><span class="line"></span><br><span class="line">create  procedure  he(a int)</span><br><span class="line">begin</span><br><span class="line">select * from student where id &#x3D;a ;</span><br><span class="line"></span><br><span class="line">end&#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line">call he(1);</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="==视图=="></a>==视图==</h3></li><li>创建  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create  view   视图名 [（列名1，列名2，...）]   as  select 语句；</span><br></pre></td></tr></table></figure></li><li>使用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名1 from  视图名;</span><br></pre></td></tr></table></figure></li><li>修改  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter view 视图名 [（列名1，列名2，...）] as select语句；</span><br></pre></td></tr></table></figure></li><li>删除  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop  view  [if exists] 视图名；</span><br></pre></td></tr></table></figure><h3 id="触发器"><a href="#触发器" class="headerlink" title="==触发器=="></a>==触发器==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create trigger 触发器名 after|before  insert|update|delete  on 表名  for each row</span><br><span class="line">begin</span><br><span class="line">    sql 语句</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER t_afterinsert_on_tab1 </span><br><span class="line">    AFTER INSERT ON tab1</span><br><span class="line">    FOR EACH ROW</span><br><span class="line">    BEGIN</span><br><span class="line">        insert into tab2(tab2_id) values(new.tab1_id);</span><br><span class="line">    END; </span><br></pre></td></tr></table></figure><h3 id="数据的导入以及导出"><a href="#数据的导入以及导出" class="headerlink" title="==数据的导入以及导出=="></a>==数据的导入以及导出==</h3></li><li>方式<ul><li>mysqldump</li><li>工具 navicate  phpmyadmin(不推荐)</li></ul></li><li>导出<ul><li>navicate  右键导入导出</li><li>mysqldump  -u用户名  -p密码  数据库名  表名 &gt;文件名</li></ul></li><li>导入<ul><li>mysql  -u用户名  -p密码   &lt;文件名</li><li>连接到数据库</li><li>source   文件名全路径</li></ul></li><li>推荐mysqldump  速度快 安全<h3 id="数据表设计-三范式"><a href="#数据表设计-三范式" class="headerlink" title="==数据表设计(三范式)=="></a>==数据表设计(三范式)==</h3></li><li>第一范式（１ＮＦ），原子性<ul><li>即表的列的具有原子性,不可再分解，即列的信息，不能分解, 只要数据库是关系型数据库，就自动的满足1NF。</li></ul></li><li>第二范式（2NF）<ul><li>是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要我们设计一个主键来实现(这里的主键不包含业务逻辑)</li></ul></li><li>第三范式（3NF）<ul><li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主键字段。就是说，表的信息，如果能够被推导出来，就不应该单独的设计一个字段来存放(能尽量外键join就用外键join)。很多时候，我们为了满足第三范式往往会把一张表分成多张表</li></ul></li><li>另外，范式不是绝对要求，有时候我们为了数据的使用方便，还会（需要）故意违反范式。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是数据库-database&quot;&gt;&lt;a href=&quot;#什么是数据库-database&quot; class=&quot;headerlink&quot; title=&quot;==什么是数据库(database)?==&quot;&gt;&lt;/a&gt;==什么是数据库(database)?==&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/08/18/hello-world/"/>
    <id>http://yoursite.com/2020/08/18/hello-world/</id>
    <published>2020-08-18T03:52:48.844Z</published>
    <updated>2020-08-18T03:52:48.844Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
